const DB_NAME="MWS-Restaurant-DB",RESTAURANTS_STR="restaurants",REVIEWS_STR="reviews";class DBHelper{static get DATABASE_URL(){return"http://localhost:1337"}static fetchFromServer(e,t){const r=`${DBHelper.DATABASE_URL}/${e}`;return fetch(r).then(e=>{if(200===e.status)return e.json();{const r=`Request failed. Returned status of ${e.status}`;t(r,null)}}).then(e=>t(null,e))}static fetchRestaurantById(e,t){DBHelper.fetchFromServer(RESTAURANTS_STR,(r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchFromServer(RESTAURANTS_STR,(r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchFromServer(RESTAURANTS_STR,(r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.recordsInIDB(RESTAURANTS_STR).then(n=>{n?DBHelper.getAllRecords(RESTAURANTS_STR).then(n=>{DBHelper.filterByCuisineAndNeighborhood(e,t,n,r)}):DBHelper.fetchFromServer(RESTAURANTS_STR,(n,o)=>{n?r(n,null):DBHelper.filterByCuisineAndNeighborhood(e,t,o,r)})})}static filterByCuisineAndNeighborhood(e,t,r,n){let o=r;"all"!=e&&(o=o.filter(t=>t.cuisine_type==e)),"all"!=t&&(o=o.filter(e=>e.neighborhood==t)),n(null,o)}static fetchNeighborhoods(e){DBHelper.recordsInIDB(RESTAURANTS_STR).then(t=>{t?DBHelper.getAllRecords(RESTAURANTS_STR).then(t=>{DBHelper.getUniqueNeighborhoods(t,e)}).catch(t=>{e(t,null)}):DBHelper.fetchFromServer(RESTAURANTS_STR,(t,r)=>{t?e(t,null):DBHelper.getUniqueNeighborhoods(r,e)})})}static getUniqueNeighborhoods(e,t){const r=e.map((t,r)=>e[r].neighborhood);t(null,r.filter((e,t)=>r.indexOf(e)==t))}static fetchCuisines(e){DBHelper.recordsInIDB(RESTAURANTS_STR).then(t=>{t?DBHelper.getAllRecords(RESTAURANTS_STR).then(t=>{DBHelper.getUniqueCuisines(t,e)}).catch(t=>{e(t,null)}):DBHelper.fetchFromServer(RESTAURANTS_STR,(t,r)=>{t?e(t,null):DBHelper.getUniqueCuisines(r,e)})})}static getUniqueCuisines(e,t){const r=e.map((t,r)=>e[r].cuisine_type);t(null,r.filter((e,t)=>r.indexOf(e)==t))}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.jpg`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static checkForIDBSupport(){return"indexedDB"in window}static openDB(){return idb.open(DB_NAME,1,e=>{if(!e.objectStoreNames.contains(RESTAURANTS_STR)){const t=e.createObjectStore(RESTAURANTS_STR,{keyPath:"id"});t.createIndex("neighborhood","neighborhood",{unique:!1}),t.createIndex("cuisine","cuisine_type",{unique:!1})}if(!e.objectStoreNames.contains(REVIEWS_STR)){e.createObjectStore(REVIEWS_STR,{keyPath:"id"}).createIndex("restaurant_id","restaurant_id",{unique:!1})}})}static getNumRecords(e){return DBHelper.openDB().then(t=>{return t.transaction(e).objectStore(e).count()})}static recordsInIDB(e){return DBHelper.getNumRecords(e).then(e=>e>0)}static addRecords(e,t){return DBHelper.openDB().then(r=>{const n=r.transaction(t,"readwrite"),o=n.objectStore(t);return e.forEach(e=>{o.put(e)}),n.complete})}static deleteRecord(e,t){return DBHelper.openDB().then(r=>{const n=r.transaction(t,"readwrite");return n.objectStore(t).delete(e),n.complete})}static getRecordsByValue(e,t,r){return DBHelper.openDB().then(e=>{return e.transaction(r).objectStore(r).openCursor()}).then(function t(r){if(r)return records.push(r.value[e]),r.continue().then(t)}).then(()=>records)}static recordsInIDBByFilter(e,t,r){return this.getRecordsFromIndex(e,t,r).then(e=>e.length>0)}static getAllRecords(e){return DBHelper.openDB().then(t=>{return t.transaction(e).objectStore(e).getAll()})}static filterRecordsByFieldValue(e,t,r){let n=[];return r.forEach(r=>{r[e]===t&&n.push(r)}),n}}